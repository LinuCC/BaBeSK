<?php

namespace Babesk\Proxies\__CG__\Babesk\ORM;

/**
 * DO NOT EDIT THIS FILE - IT WAS CREATED BY DOCTRINE'S PROXY GENERATOR
 */
class KuwasysClass extends \Babesk\ORM\KuwasysClass implements \Doctrine\ORM\Proxy\Proxy
{
    /**
     * @var \Closure the callback responsible for loading properties in the proxy object. This callback is called with
     *      three parameters, being respectively the proxy object to be initialized, the method that triggered the
     *      initialization process and an array of ordered parameters that were passed to that method.
     *
     * @see \Doctrine\Common\Persistence\Proxy::__setInitializer
     */
    public $__initializer__;

    /**
     * @var \Closure the callback responsible of loading properties that need to be copied in the cloned object
     *
     * @see \Doctrine\Common\Persistence\Proxy::__setCloner
     */
    public $__cloner__;

    /**
     * @var boolean flag indicating if this object was already initialized
     *
     * @see \Doctrine\Common\Persistence\Proxy::__isInitialized
     */
    public $__isInitialized__ = false;

    /**
     * @var array properties to be lazy loaded, with keys being the property
     *            names and values being their default values
     *
     * @see \Doctrine\Common\Persistence\Proxy::__getLazyProperties
     */
    public static $lazyPropertiesDefaults = array();



    /**
     * @param \Closure $initializer
     * @param \Closure $cloner
     */
    public function __construct($initializer = null, $cloner = null)
    {

        $this->__initializer__ = $initializer;
        $this->__cloner__      = $cloner;
    }







    /**
     * 
     * @return array
     */
    public function __sleep()
    {
        if ($this->__isInitialized__) {
            return array('__isInitialized__', 'id', 'label', 'description', 'maxRegistration', 'registrationEnabled', 'isOptional', 'usersInClassesAndCategories', 'schoolyear', 'categories', 'classteachers');
        }

        return array('__isInitialized__', 'id', 'label', 'description', 'maxRegistration', 'registrationEnabled', 'isOptional', 'usersInClassesAndCategories', 'schoolyear', 'categories', 'classteachers');
    }

    /**
     * 
     */
    public function __wakeup()
    {
        if ( ! $this->__isInitialized__) {
            $this->__initializer__ = function (KuwasysClass $proxy) {
                $proxy->__setInitializer(null);
                $proxy->__setCloner(null);

                $existingProperties = get_object_vars($proxy);

                foreach ($proxy->__getLazyProperties() as $property => $defaultValue) {
                    if ( ! array_key_exists($property, $existingProperties)) {
                        $proxy->$property = $defaultValue;
                    }
                }
            };

        }
    }

    /**
     * 
     */
    public function __clone()
    {
        $this->__cloner__ && $this->__cloner__->__invoke($this, '__clone', array());
    }

    /**
     * Forces initialization of the proxy
     */
    public function __load()
    {
        $this->__initializer__ && $this->__initializer__->__invoke($this, '__load', array());
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific loading logic
     */
    public function __isInitialized()
    {
        return $this->__isInitialized__;
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific loading logic
     */
    public function __setInitialized($initialized)
    {
        $this->__isInitialized__ = $initialized;
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific loading logic
     */
    public function __setInitializer(\Closure $initializer = null)
    {
        $this->__initializer__ = $initializer;
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific loading logic
     */
    public function __getInitializer()
    {
        return $this->__initializer__;
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific loading logic
     */
    public function __setCloner(\Closure $cloner = null)
    {
        $this->__cloner__ = $cloner;
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific cloning logic
     */
    public function __getCloner()
    {
        return $this->__cloner__;
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific loading logic
     * @static
     */
    public function __getLazyProperties()
    {
        return self::$lazyPropertiesDefaults;
    }

    
    /**
     * {@inheritDoc}
     */
    public function getId()
    {
        if ($this->__isInitialized__ === false) {
            return (int)  parent::getId();
        }


        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getId', array());

        return parent::getId();
    }

    /**
     * {@inheritDoc}
     */
    public function setLabel($label)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setLabel', array($label));

        return parent::setLabel($label);
    }

    /**
     * {@inheritDoc}
     */
    public function getLabel()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getLabel', array());

        return parent::getLabel();
    }

    /**
     * {@inheritDoc}
     */
    public function setDescription($description)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setDescription', array($description));

        return parent::setDescription($description);
    }

    /**
     * {@inheritDoc}
     */
    public function getDescription()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getDescription', array());

        return parent::getDescription();
    }

    /**
     * {@inheritDoc}
     */
    public function setMaxRegistration($maxRegistration)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setMaxRegistration', array($maxRegistration));

        return parent::setMaxRegistration($maxRegistration);
    }

    /**
     * {@inheritDoc}
     */
    public function getMaxRegistration()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getMaxRegistration', array());

        return parent::getMaxRegistration();
    }

    /**
     * {@inheritDoc}
     */
    public function setRegistrationEnabled($registrationEnabled)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setRegistrationEnabled', array($registrationEnabled));

        return parent::setRegistrationEnabled($registrationEnabled);
    }

    /**
     * {@inheritDoc}
     */
    public function getRegistrationEnabled()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getRegistrationEnabled', array());

        return parent::getRegistrationEnabled();
    }

    /**
     * {@inheritDoc}
     */
    public function setIsOptional($isOptional)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setIsOptional', array($isOptional));

        return parent::setIsOptional($isOptional);
    }

    /**
     * {@inheritDoc}
     */
    public function getIsOptional()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getIsOptional', array());

        return parent::getIsOptional();
    }

    /**
     * {@inheritDoc}
     */
    public function addUsersInClassesAndCategory(\Babesk\ORM\UserInClassAndCategory $usersInClassesAndCategories)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'addUsersInClassesAndCategory', array($usersInClassesAndCategories));

        return parent::addUsersInClassesAndCategory($usersInClassesAndCategories);
    }

    /**
     * {@inheritDoc}
     */
    public function removeUsersInClassesAndCategory(\Babesk\ORM\UserInClassAndCategory $usersInClassesAndCategories)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'removeUsersInClassesAndCategory', array($usersInClassesAndCategories));

        return parent::removeUsersInClassesAndCategory($usersInClassesAndCategories);
    }

    /**
     * {@inheritDoc}
     */
    public function getUsersInClassesAndCategories()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getUsersInClassesAndCategories', array());

        return parent::getUsersInClassesAndCategories();
    }

    /**
     * {@inheritDoc}
     */
    public function setSchoolyear(\Babesk\ORM\SystemSchoolyears $schoolyear = NULL)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setSchoolyear', array($schoolyear));

        return parent::setSchoolyear($schoolyear);
    }

    /**
     * {@inheritDoc}
     */
    public function getSchoolyear()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getSchoolyear', array());

        return parent::getSchoolyear();
    }

    /**
     * {@inheritDoc}
     */
    public function addCategory(\Babesk\ORM\ClassCategory $categories)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'addCategory', array($categories));

        return parent::addCategory($categories);
    }

    /**
     * {@inheritDoc}
     */
    public function removeCategory(\Babesk\ORM\ClassCategory $categories)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'removeCategory', array($categories));

        return parent::removeCategory($categories);
    }

    /**
     * {@inheritDoc}
     */
    public function getCategories()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getCategories', array());

        return parent::getCategories();
    }

    /**
     * {@inheritDoc}
     */
    public function addClassteacher(\Babesk\ORM\Classteacher $classteachers)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'addClassteacher', array($classteachers));

        return parent::addClassteacher($classteachers);
    }

    /**
     * {@inheritDoc}
     */
    public function removeClassteacher(\Babesk\ORM\Classteacher $classteachers)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'removeClassteacher', array($classteachers));

        return parent::removeClassteacher($classteachers);
    }

    /**
     * {@inheritDoc}
     */
    public function getClassteachers()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getClassteachers', array());

        return parent::getClassteachers();
    }

}
