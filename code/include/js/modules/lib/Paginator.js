// Generated by Coffeescript
var React, range;

React = require('react');

range = function(start, stop) {
  var arr, idx, length;
  if (arguments.length <= 1) {
    stop = start || 0;
    start = 0;
  }
  length = Math.max(stop - start, 0);
  idx = 0;
  arr = new Array(length);
  while (idx < length) {
    arr[idx++] = start;
    start += 1;
  }
  return arr;
};

module.exports = React.createClass({
  propTypes: {
    numPages: React.PropTypes.number.isRequired,
    maxPages: React.PropTypes.number,
    onClick: React.PropTypes.func
  },
  getDefaultProps: function() {
    return {
      maxPages: 3
    };
  },
  getInitialState: function() {
    return {
      page: 1
    };
  },
  onClick: function(n) {
    if (n > this.props.numPages || n < 1) {
      return;
    }
    if (this.props.onClick) {
      this.props.onClick(n);
    }
    return this.setState({
      page: n
    });
  },
  getDisplayCount: function() {
    if (this.props.numPages > this.props.maxPages) {
      return this.props.maxPages;
    }
    return this.props.numPages;
  },
  getPageRange: function() {
    var displayCount, idx, page, remaining, start;
    displayCount = this.getDisplayCount();
    page = this.state.page;
    idx = (page - 1) % displayCount;
    start = page - idx;
    remaining = this.props.numPages - page;
    if (page > displayCount && remaining < displayCount) {
      start = this.props.numPages - displayCount + 1;
    }
    return range(start, start + displayCount);
  },
  preventDefault: function(e) {
    return e.preventDefault();
  },
  render: function() {
    var nextClassName, page, prevClassName;
    page = this.state.page;
    prevClassName = page === 1 ? 'disabled' : '';
    nextClassName = page >= this.props.numPages ? 'disabled' : '';
    return React.createElement("ul", {
      "className": 'pagination'
    }, React.createElement("li", {
      "className": prevClassName,
      "onClick": this.onClick.bind(null, page - 1)
    }, React.createElement("a", {
      "href": '#',
      "onClick": this.preventDefault
    }, React.createElement("i", {
      "className": 'fa fa-chevron-left'
    }))), this.getPageRange().map(this.renderPage), React.createElement("li", {
      "className": nextClassName,
      "onClick": this.onClick.bind(null, page + 1)
    }, React.createElement("a", {
      "href": '#',
      "onClick": this.preventDefault
    }, React.createElement("i", {
      "className": 'fa fa-chevron-right'
    }))));
  },
  renderPage: function(n, i) {
    var cls;
    cls = this.state.page === n ? 'active' : '';
    return React.createElement("li", {
      "key": i,
      "className": cls,
      "onClick": this.onClick.bind(null, n)
    }, React.createElement("a", {
      "href": '#',
      "onClick": this.preventDefault
    }, n));
  }
});
