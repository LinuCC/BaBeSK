// Generated by Coffeescript
var BookAssignmentsPanel, Button, Col, Icon, Input, Panel, React, Row, SelectList, Toggle;

React = require('react');

Button = require('react-bootstrap/lib/Button');

Icon = require('lib/FontAwesomeIcon');

Input = require('react-bootstrap/lib/Input');

Panel = require('react-bootstrap/lib/Panel');

Toggle = require('react-toggle');

Row = require('react-bootstrap/lib/Row');

Col = require('react-bootstrap/lib/Col');

SelectList = require('react-widgets/lib/SelectList');

BookAssignmentsPanel = require('./Settings/BookAssignmentsPanel');

module.exports = React.createClass({
  getDefaultProps: function() {
    return {
      user: {},
      groups: [],
      schoolyears: [],
      settingsChanged: false,
      onUserChange: function(key, value) {
        return console.log([key, value]);
      }
    };
  },
  handleGroupChange: function(selectedGroups) {
    var groups;
    groups = selectedGroups.map(function(group) {
      return group.id;
    });
    if (groups.length === 0) {
      groups = false;
    }
    return this.props.onUserChange('activeGroups', groups);
  },
  handlePersonalDataChange: function(name, event) {
    return this.props.onUserChange(name, event.target.value);
  },
  handleAccountLockedChange: function(event) {
    return this.props.onUserChange('locked', event.target.checked);
  },
  handleRefresh: function() {
    return this.props.refresh();
  },
  render: function() {
    var personalTitle, systemTitle;
    console.log(this.props);
    personalTitle = React.createElement("h4", null, "Personendaten");
    systemTitle = React.createElement("h4", null, "Systemdaten");
    return React.createElement("div", null, React.createElement(Row, null, React.createElement(Col, {
      "md": 12.,
      "lg": 6.
    }, React.createElement(Panel, {
      "className": 'panel-dashboard',
      "header": personalTitle
    }, React.createElement("form", {
      "className": 'form-horizontal'
    }, React.createElement(Input, {
      "type": 'text',
      "value": this.props.user.forename,
      "label": 'Vorname',
      "labelClassName": 'col-xs-2',
      "wrapperClassName": 'col-xs-10',
      "addonBefore": React.createElement(Icon, {
        "name": 'newspaper-o',
        "fixedWidth": true
      }),
      "onChange": this.handlePersonalDataChange.bind(null, 'forename')
    }), React.createElement(Input, {
      "type": 'text',
      "value": this.props.user.surname,
      "label": 'Nachname',
      "labelClassName": 'col-xs-2',
      "wrapperClassName": 'col-xs-10',
      "addonBefore": React.createElement(Icon, {
        "name": 'newspaper-o',
        "fixedWidth": true
      }),
      "onChange": this.handlePersonalDataChange.bind(null, 'surname')
    }), React.createElement(Input, {
      "type": 'text',
      "value": this.props.user.username,
      "label": 'Benutzername',
      "labelClassName": 'col-xs-2',
      "wrapperClassName": 'col-xs-10',
      "addonBefore": React.createElement(Icon, {
        "name": 'user',
        "fixedWidth": true
      }),
      "onChange": this.handlePersonalDataChange.bind(null, 'username')
    }), React.createElement(Input, {
      "type": 'text',
      "value": this.props.user.email,
      "label": 'Emailadresse',
      "labelClassName": 'col-xs-2',
      "wrapperClassName": 'col-xs-10',
      "addonBefore": React.createElement(Icon, {
        "name": 'envelope-o',
        "fixedWidth": true
      }),
      "onChange": this.handlePersonalDataChange.bind(null, 'email')
    }), React.createElement(Input, {
      "type": 'text',
      "value": this.props.user.telephone,
      "label": 'Telefonnummer',
      "labelClassName": 'col-xs-2',
      "wrapperClassName": 'col-xs-10',
      "addonBefore": React.createElement(Icon, {
        "name": 'phone',
        "fixedWidth": true
      }),
      "onChange": this.handlePersonalDataChange.bind(null, 'telephone')
    }), React.createElement(Input, {
      "type": 'text',
      "value": this.props.user.birthday,
      "label": 'Geburtsdatum',
      "labelClassName": 'col-xs-2',
      "wrapperClassName": 'col-xs-10',
      "addonBefore": React.createElement(Icon, {
        "name": 'calendar',
        "fixedWidth": true
      }),
      "onChange": this.handlePersonalDataChange.bind(null, 'birthday')
    })))), React.createElement(Col, {
      "md": 12.,
      "lg": 6.
    }, React.createElement(Panel, {
      "className": 'panel-dashboard',
      "header": systemTitle
    }, React.createElement("form", {
      "className": 'form-horizontal'
    }, React.createElement(Input, {
      "label": 'Konto gesperrt?',
      "onChange": this.handleGroupChange,
      "labelClassName": 'col-xs-2',
      "wrapperClassName": 'col-xs-10'
    }, React.createElement(Toggle, {
      "checked": this.props.user.locked,
      "onChange": this.handleAccountLockedChange
    })), React.createElement(Input, {
      "wrapperClassName": 'col-xs-offset-2 col-xs-10'
    }, React.createElement(Button, {
      "bsStyle": 'default'
    }, "Passwort \u00e4ndern")), React.createElement(Input, {
      "label": 'Benutzergruppen',
      "labelClassName": 'col-xs-2',
      "wrapperClassName": 'col-xs-10'
    }, React.createElement(SelectList, {
      "data": this.props.groups,
      "valueField": 'id',
      "value": this.props.user.activeGroups,
      "textField": 'name',
      "multiple": true,
      "onChange": this.handleGroupChange
    }))))), React.createElement(Col, {
      "md": 12.,
      "lg": 12.
    }, React.createElement("hr", null)), React.createElement(Col, {
      "md": 12.,
      "lg": 6.
    }, React.createElement(BookAssignmentsPanel, {
      "bookAssignments": this.props.user.bookAssignments,
      "schoolyears": this.props.schoolyears,
      "userId": this.props.user.id,
      "refresh": this.handleRefresh
    }))));
  }
});
