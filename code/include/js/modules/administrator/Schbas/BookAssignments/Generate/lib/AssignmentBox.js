// Generated by Coffeescript
var ActionFooter, AddGradelevelLine, AssignmentBox, AssignmentSchoolyearsLine, AssignmentsTable, AssignmentsTableGradeEntry, Button, Input, LoadingIcon, React, StatusIcon, Table, classnames,
  __slice = [].slice;

React = require('react');

React.Bootstrap = require('react-bootstrap');

Input = React.Bootstrap.Input;

Table = React.Bootstrap.Table;

Button = React.Bootstrap.Button;

classnames = require('classnames');

StatusIcon = require('lib/StatusIcon').StatusIcon;

LoadingIcon = require('lib/LoadingIcon').LoadingIcon;

AssignmentBox = React.createClass({
  getInitialState: function() {
    return {
      existingAssignmentsAction: 'add-to-existing',
      addGradelevelToUsers: true,
      isLoading: false
    };
  },
  handleSubmit: function(event) {
    var that;
    this.setState({
      isLoading: true
    });
    that = this;
    return $.ajax({
      type: 'POST',
      url: 'index.php?module=administrator|Schbas|BookAssignments|Generate',
      data: {
        data: this.state
      },
      dataType: 'json',
      success: function(data, statusText, jqXHR) {
        that.setState({
          isLoading: false
        });
        return toastr.success('Die Zuweisungen wurden erfolgreich generiert.');
      },
      error: function(jqXHR, statusText, errorThrown) {
        that.setState({
          isLoading: false
        });
        if (jqXHR.status === 500) {
          return toastr.error(jqXHR.responseText, 'Ein Fehler ist aufgetreten.');
        } else {
          console.log(jqXHR);
          return toastr.error('Ein Fehler ist aufgetreten.');
        }
      }
    });
  },
  handleExistingAssignmentsAction: function(event) {
    return this.setState({
      existingAssignmentsAction: event.target.value
    });
  },
  handleAddGradelevelChange: function(event) {
    return this.setState({
      addGradelevelToUsers: event.target.checked
    });
  },
  render: function() {
    return React.createElement("div", {
      "className": "panel panel-default"
    }, React.createElement("div", {
      "className": "panel-heading"
    }, React.createElement("h3", {
      "className": "panel-title"
    }, "Automatische Zuweisungen der Buchausleihen (", this.props.data.schoolyear, ")")), React.createElement("ul", {
      "className": "list-group checklist"
    }, React.createElement(AssignmentSchoolyearsLine, {
      "assignmentsExist": this.props.data.assignmentsForSchoolyearExist,
      "handleExistingAssignmentsAction": this.handleExistingAssignmentsAction,
      "selectedValue": this.state.existingAssignmentsAction
    }), React.createElement(AddGradelevelLine, {
      "isChecked": this.state.addGradelevelToUsers,
      "handleAddGradelevelChange": this.handleAddGradelevelChange
    })), React.createElement("div", {
      "className": "panel-heading"
    }, React.createElement("i", {
      "className": "fa fa-list fa-fw fa-lg"
    }), "\u00a0\u00a0\nVorschau der Zuweisungen der B\u00fccher zu Sch\u00fclern bestimmter\nKlassenstufen"), React.createElement(AssignmentsTable, {
      "entries": this.props.data.bookAssignmentsForGrades
    }), React.createElement("div", {
      "className": 'panel-footer'
    }, React.createElement(ActionFooter, {
      "handleSubmit": this.handleSubmit,
      "isLoading": this.state.isLoading
    })));
  }
});

AssignmentSchoolyearsLine = React.createClass({
  render: function() {
    var classes, iconStatus;
    classes = classnames({
      'list-group-item': true,
      'list-group-item-success': !this.props.assignmentsExist,
      'list-group-item-warning': this.props.assignmentsExist
    });
    iconStatus = this.props.assignmentsExist ? 'warning' : 'success';
    return React.createElement("li", {
      "className": classes
    }, React.createElement(StatusIcon, {
      "status": iconStatus
    }), (this.props.assignmentsExist ? React.createElement("div", {
      "className": "form-inline"
    }, React.createElement("p", null, "Zuweisungen f\u00fcr dieses Schuljahr sind bereits vorhanden.\nWas soll gemacht werden?"), React.createElement(Input, {
      "type": "select",
      "standalone": true,
      "value": this.props.selectedValue,
      "onChange": this.props.handleExistingAssignmentsAction
    }, React.createElement("option", {
      "value": 'delete-existing'
    }, "L\u00f6sche existierende Zuweisungen f\u00fcr dieses Schuljahr."), React.createElement("option", {
      "value": 'add-to-existing'
    }, "F\u00fcge die automatisch generierten Zuweisungen hinzu."))) : React.createElement("p", null, "Keine Zuweisungen f\u00fcr dieses Schuljahr vorhanden.")), React.createElement("div", {
      "className": "clearfix"
    }));
  }
});

AddGradelevelLine = React.createClass({
  render: function() {
    return React.createElement("li", {
      "className": 'list-group-item'
    }, React.createElement("i", {
      "className": "fa fa-3x fa-fw pull-left fa-question-circle"
    }), React.createElement("p", null, "Steigen die Sch\u00fcler w\u00e4hrenddessen normalerweise eine Klassenstufe auf?", React.createElement(Input, {
      "type": "checkbox",
      "label": "Ja, eine Stufe",
      "standalone": true,
      "onChange": this.props.handleAddGradelevelChange,
      "checked": this.props.isChecked
    })), React.createElement("div", {
      "className": "clearfix"
    }));
  }
});

AssignmentsTable = React.createClass({
  render: function() {
    return React.createElement(Table, {
      "bordered": true
    }, React.createElement("thead", null, React.createElement("tr", null, React.createElement("th", null, "Klassenstufe"), React.createElement("th", null, "B\u00fccher"))), React.createElement("tbody", null, this.props.entries.map(function(entry) {
      return React.createElement(AssignmentsTableGradeEntry, {
        "gradelevel": entry.gradelevel,
        "books": entry.books,
        "key": entry.gradelevel
      });
    }, this)));
  }
});

AssignmentsTableGradeEntry = React.createClass({
  render: function() {
    var firstBook, restBooks, showBookLink, _ref;
    showBookLink = 'index.php?module=administrator|Schbas|ShowBook';
    _ref = this.props.books, firstBook = _ref[0], restBooks = 2 <= _ref.length ? __slice.call(_ref, 1) : [];
    if (restBooks == null) {
      restBooks = [];
    }
    return React.createElement("tbody", null, React.createElement("tr", {
      "key": firstBook.id
    }, React.createElement("td", {
      "rowSpan": this.props.books.length
    }, this.props.gradelevel), React.createElement("td", null, React.createElement("a", {
      "href": "" + showBookLink + "&id=" + firstBook.id
    }, firstBook.name))), restBooks.map(function(book) {
      return React.createElement("tr", {
        "key": book.id
      }, React.createElement("td", null, React.createElement("a", {
        "href": "" + showBookLink + "&id=" + book.id
      }, book.name)));
    }, this));
  }
});

ActionFooter = React.createClass({
  render: function() {
    var isLoading;
    isLoading = this.props.isLoading;
    return React.createElement("div", null, React.createElement(Button, {
      "className": 'pull-right',
      "bsStyle": 'primary',
      "onClick": (!isLoading ? this.props.handleSubmit : void 0),
      "disabled": isLoading
    }, (!isLoading ? 'Zuweisungen generieren' : React.createElement("span", null, React.createElement(LoadingIcon, null), " Lade..."))), React.createElement(Button, {
      "className": 'pull-left',
      "bsStyle": 'default',
      "href": 'index.php?module=administrator|Schbas|BookAssignments'
    }, "Abbrechen"), React.createElement("div", {
      "className": 'clearfix'
    }));
  }
});

module.exports = AssignmentBox;
