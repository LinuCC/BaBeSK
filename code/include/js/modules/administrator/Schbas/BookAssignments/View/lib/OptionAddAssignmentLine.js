// Generated by Coffeescript
var Button, ButtonGroup, Col, DropdownButton, ExtendedSelect, Input, ListGroupItem, MenuItem, React, Row;

React = require('react');

React.Bootstrap = require('react-bootstrap');

ListGroupItem = React.Bootstrap.ListGroupItem;

Row = React.Bootstrap.Row;

Col = React.Bootstrap.Col;

Button = React.Bootstrap.Button;

Input = React.Bootstrap.Input;

ButtonGroup = React.Bootstrap.ButtonGroup;

DropdownButton = React.Bootstrap.DropdownButton;

MenuItem = React.Bootstrap.MenuItem;

ExtendedSelect = require('react-select');

module.exports = React.createClass({
  getInitialState: function() {
    return {
      selectedBook: 0,
      selectedType: 'user',
      selectedValue: 0
    };
  },
  getDefaultProps: function() {
    return {
      schoolyear: {}
    };
  },
  replaceKeys: function(data, keyLabelName, keyValueName) {
    return data.map(function(entry) {
      entry.label = entry[keyLabelName];
      entry.value = entry[keyValueName];
      delete entry[keyLabelName];
      delete entry[keyValueName];
      return entry;
    });
  },
  searchBooks: function(input, callback) {
    return setTimeout((function(_this) {
      return function() {
        if (!input.length) {
          return;
        }
        return $.getJSON('index.php?module=administrator|Schbas|Books|Search', {
          title: input
        }).done(function(data) {
          var selectData;
          selectData = _this.replaceKeys(data, 'title', 'id');
          return callback(null, {
            options: selectData
          });
        }).fail(function(jqxhr) {
          return toastr.error(jqxhr.responseText, 'Fehler beim Buch-suchen');
        });
      };
    })(this), 500);
  },
  searchUsers: function(input, callback) {
    return setTimeout((function(_this) {
      return function() {
        if (!input.length) {
          return;
        }
        if (_this.props.schoolyear.id == null) {
          toastr.error('Kein Schuljahr ausgewählt');
        }
        return $.getJSON('index.php?module=administrator|System|Users|Search', {
          username: input,
          schoolyearId: _this.props.schoolyear.id
        }).done(function(data) {
          var selectData;
          selectData = _this.replaceKeys(data, 'username', 'id');
          return callback(null, {
            options: selectData
          });
        }).fail(function(jqxhr) {
          return toastr.error(jqxhr.responseText, 'Fehler beim User-suchen');
        });
      };
    })(this), 500);
  },
  handleTypeSelect: function(event) {
    this.setState({
      selectedType: event.target.value
    });
    return console.log(event.target.value);
  },
  render: function() {
    var typeLabel;
    typeLabel = '';
    if (this.state.selectedType === 'user') {
      typeLabel = 'Benutzer';
    }
    if (this.state.selectedType === 'grade') {
      typeLabel = 'Klasse';
    }
    if (this.state.selectedType === 'gradelevel') {
      typeLabel = 'Klassenstufe';
    }
    return React.createElement(ListGroupItem, null, React.createElement("form", {
      "className": 'form-horizontal'
    }, React.createElement(Input, {
      "type": 'select',
      "label": 'Hinzufügen zu',
      "labelClassName": 'col-sm-2',
      "wrapperClassName": 'col-sm-10',
      "onChange": this.handleTypeSelect,
      "value": this.state.selectedType
    }, React.createElement("option", {
      "value": 'user',
      "key": 'user',
      "eventKey": 'user'
    }, "Benutzer"), React.createElement("option", {
      "value": 'grade',
      "key": 'grade',
      "eventKey": 'grade'
    }, "Klasse"), React.createElement("option", {
      "value": 'gradelevel',
      "key": 'gradelevel',
      "eventKey": 'gradelevel'
    }, "Klassenstufe")), React.createElement(Input, {
      "label": 'Buch',
      "labelClassName": 'col-sm-2',
      "wrapperClassName": 'col-sm-10'
    }, React.createElement(ExtendedSelect, {
      "asyncOptions": this.searchBooks,
      "autoload": false,
      "name": 'add-assignment-book-search'
    })), React.createElement(Input, {
      "label": typeLabel,
      "labelClassName": 'col-sm-2',
      "wrapperClassName": 'col-sm-10',
      "onChange": this.handleTypeSelect
    }, (this.state.selectedType === 'grade' ? React.createElement(ExtendedSelect, {
      "asyncOptions": this.searchBooks,
      "autoload": false,
      "name": 'add-assignment-grade-search'
    }) : this.state.selectedType === 'gradelevel' ? React.createElement(ExtendedSelect, {
      "asyncOptions": this.searchBooks,
      "autoload": false,
      "name": 'add-assignment-gradelevel-search'
    }) : this.state.selectedType === 'user' ? React.createElement(ExtendedSelect, {
      "asyncOptions": this.searchUsers,
      "autoload": false,
      "name": 'add-assignment-users-search'
    }) : void 0)), React.createElement(Button, {
      "bsStyle": 'primary',
      "className": 'pull-right'
    }, "Buch hinzuf\u00fcgen"), React.createElement("div", {
      "className": 'clearfix'
    })));
  }
});
