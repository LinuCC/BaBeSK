// Generated by Coffeescript
var AssignmentsBox, BooksToUsersAssignments, OptionsLine, Panel, React, renderBooksToUsersAssignments;

React = require('react');

React.Bootstrap = require('react-bootstrap');

BooksToUsersAssignments = require('./lib/BooksToUsersAssignments');

OptionsLine = require('./lib/OptionsLine');

Panel = React.Bootstrap.Panel;

AssignmentsBox = React.createClass({
  getInitialState: function() {
    return {
      schoolyears: [],
      books: []
    };
  },
  componentDidMount: function() {
    return this.updateData();
  },
  updateData: function() {
    var activeSy;
    activeSy = $.grep(this.state.schoolyears, function(sy) {
      return sy.active;
    });
    if (activeSy[0] != null) {
      activeSy = activeSy[0];
    }
    return $.getJSON('index.php?module=administrator|Schbas|BookAssignments|View', {
      'jsonData': true,
      'schoolyearId': activeSy.id
    }).done((function(_this) {
      return function(res) {
        if (_this.isMounted()) {
          return _this.setState(res);
        }
      };
    })(this)).fail(function(jqxhr) {
      return toastr.error(jqxhr.responseText, 'Fehler');
    });
  },
  deleteAssignments: function(data) {
    var activeSy;
    activeSy = $.grep(this.state.schoolyears, function(sy) {
      return sy.active;
    });
    if (activeSy[0] != null) {
      activeSy = activeSy[0];
    }
    data = $.extend(data, {
      schoolyearId: activeSy.id
    });
    return $.get('index.php?module=administrator|Schbas|BookAssignments|View|Delete', data).done((function(_this) {
      return function(res) {
        toastr.success(res, 'Erfolgreich gelöscht');
        return _this.updateData();
      };
    })(this)).fail(function(jqxhr) {
      return toastr.error(jqxhr.responseText, 'Fehler');
    });
  },
  handleAssignmentsChanged: function() {
    return this.updateData();
  },
  handleChangeSchoolyear: function(schoolyearId) {
    var activeSyIndex, newActiveIndex, newSchoolyears;
    newSchoolyears = this.state.schoolyears;
    activeSyIndex = newSchoolyears.map(function(e) {
      return e.active;
    }).indexOf(true);
    newActiveIndex = newSchoolyears.map(function(e) {
      return e.id === schoolyearId;
    }).indexOf(true);
    newSchoolyears[activeSyIndex]['active'] = false;
    newSchoolyears[newActiveIndex]['active'] = true;
    this.setState({
      schoolyears: newSchoolyears
    });
    return this.updateData();
  },
  handleGradelevelOfBookAssignmentsDelete: function(book, gradelevel) {
    var that;
    that = this;
    return bootbox.confirm("Wollen sie alle Buchzuweisungen des Buchs " + book.name + " für den Jahrgang " + gradelevel + " wirklich löschen?", function(res) {
      var data;
      if (res) {
        data = {
          deleteEntity: 'gradelevel',
          entityId: gradelevel,
          bookId: book.id
        };
        return that.deleteAssignments(data);
      }
    });
  },
  handleGradeOfBookAssignmentsDelete: function(book, gradeId, gradeName) {
    var that;
    that = this;
    return bootbox.confirm("Wollen sie alle Buchzuweisungen des Buchs " + book.name + " für die Klasse " + gradeName + " wirklich löschen?", function(res) {
      var data;
      if (res) {
        data = {
          deleteEntity: 'grade',
          entityId: gradeId,
          bookId: book.id
        };
        return that.deleteAssignments(data);
      }
    });
  },
  handleBookAssignmentsDelete: function(book, gradelevel) {
    var that;
    that = this;
    return bootbox.confirm("Wollen sie alle Buchzuweisungen des Buchs " + book.name + " wirklich löschen?", function(res) {
      var data;
      if (res) {
        data = {
          deleteEntity: 'book',
          entityId: book.id,
          bookId: book.id
        };
        return that.deleteAssignments(data);
      }
    });
  },
  render: function() {
    var title;
    title = React.createElement("h4", null, "Zuweisungen der B\u00fccher an Nutzer");
    return React.createElement(Panel, {
      "className": 'panel-dashboard',
      "header": title
    }, React.createElement(OptionsLine, {
      "schoolyears": this.state.schoolyears,
      "handleChangeSchoolyear": this.handleChangeSchoolyear,
      "onAssignmentsChanged": this.handleAssignmentsChanged
    }), React.createElement(BooksToUsersAssignments, {
      "books": this.state.books,
      "handleGradelevelOfBookAssignmentsDelete": this.handleGradelevelOfBookAssignmentsDelete,
      "handleGradeOfBookAssignmentsDelete": this.handleGradeOfBookAssignmentsDelete,
      "handleBookAssignmentsDelete": this.handleBookAssignmentsDelete
    }));
  }
});

renderBooksToUsersAssignments = function() {
  return React.render(React.createElement(AssignmentsBox, null), $('#view-entry')[0]);
};

renderBooksToUsersAssignments();
