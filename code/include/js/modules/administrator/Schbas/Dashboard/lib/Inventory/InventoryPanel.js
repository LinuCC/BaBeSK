// Generated by Coffeescript
var AddInventoryBox, Button, ButtonGroup, Icon, React, SolveDuplicatesBox;

React = require('react');

Button = require('react-bootstrap/lib/Button');

Icon = require('lib/FontAwesomeIcon');

ButtonGroup = require('react-bootstrap/lib/ButtonGroup');

AddInventoryBox = require('./AddInventoryBox');

SolveDuplicatesBox = require('./SolveDuplicatesBox');

module.exports = React.createClass({
  getInitialState: function() {
    return {
      showAddInventory: false,
      newBarcodes: [],
      askDuplicates: false,
      askDuplicatesData: {}
    };
  },
  checkForUniqueBarcodes: function(booksWithBarcodes) {
    var duplicated, unique;
    duplicated = [];
    unique = [];
    return booksWithBarcodes.map(function(book) {
      return book.barcodes.map(function(barcode) {
        var isDuplicated;
        isDuplicated = false;
        booksWithBarcodes.map(function(compareBook) {
          return compareBook.barcodes.map(function(compareBarcode) {
            var barcodeKey, bookKey, newBarcodeDuplication, newBook, newCompareBook;
            if (book.id !== compareBook.id && barcode === compareBarcode) {
              isDuplicated = true;
              barcodeKey = lookupKeyOfObjectInArray(duplicated, 'barcode', compareBarcode);
              if (barcodeKey !== false) {
                bookKey = lookupKeyOfObjectInArray(duplicated[barcodeKey]['books'], 'id', compareBook.id);
                if (bookKey !== false) {

                } else {
                  return duplicated[barcodeKey]['books'].push(compareBook);
                }
              } else {
                newBarcodeDuplication = {
                  barcode: compareBarcode,
                  books: []
                };
                newBook = {
                  id: book.id,
                  title: book.title
                };
                newCompareBook = {
                  id: compareBook.id,
                  title: compareBook.title
                };
                newBarcodeDuplication.books.push(newBook);
                newBarcodeDuplication.books.push(newCompareBook);
                return duplicated.push(newBarcodeDuplication);
              }
            }
          });
        });
        if (!isDuplicated) {
          return unique.push({
            barcode: barcode,
            bookId: book.id
          });
        }
      });
    });
  },
  handleAddInventoryClicked: function() {
    return this.setState({
      showAddInventory: true
    });
  },
  handleSubmitAddInventoryClicked: function() {
    return $.getJSON('index.php?module=administrator|Schbas|Inventory', {
      getBooksForBarcodes: true,
      barcodes: this.state.newBarcodes
    }).done((function(_this) {
      return function(barcodes) {
        if (barcodes.duplicated.length > 0) {
          barcodes.duplicated = barcodes.duplicated.map(function(barcodeGroup) {
            barcodeGroup.assignedBookId = false;
            return barcodeGroup;
          });
          return _this.setState({
            askDuplicatesData: barcodes,
            askDuplicates: true
          });
        } else {
          return _this.uploadBarcodes(barcodes.unique);
        }
      };
    })(this)).fail(function(jqxhr) {
      return toastr.error(jqxhr.responseText, 'Fehler');
    });
  },
  handleSubmitAddDuplicatedInventoryClicked: function() {
    var barcodesToUpload;
    barcodesToUpload = this.state.askDuplicatesData.unique;
    this.state.askDuplicatesData.duplicated.forEach(function(group) {
      return group.barcodes.forEach(function(barcode) {
        return barcodesToUpload.push({
          barcode: barcode,
          bookId: group.assignedBookId
        });
      });
    });
    return this.uploadBarcodes(barcodesToUpload);
  },
  uploadBarcodes: function(barcodes) {
    return $.post('index.php?module=administrator|Schbas|Inventory|Add', {
      barcodesWithBookIds: barcodes
    }).done((function(_this) {
      return function(res) {
        toastr.success(res, 'Erfolgreich');
        return _this.setState({
          newBarcodes: [],
          showAddInventory: false
        });
      };
    })(this)).fail(function(jqxhr) {
      return toastr.error(jqxhr.responseText, 'Ein Fehler ist aufgetreten');
    });
  },
  handleCancelAddInventoryClicked: function() {
    return this.setState({
      showAddInventory: false
    });
  },
  handleNewBarcode: function(barcode) {
    var barcodes;
    barcodes = this.state.newBarcodes;
    barcodes.push(barcode);
    return this.setState({
      newBarcodes: barcodes
    });
  },
  handleNewBarcodeRemove: function(barcodeIndex) {
    var barcodes;
    barcodes = this.state.newBarcodes;
    barcodes.splice(barcodeIndex, 1);
    return this.setState({
      newBarcodes: barcodes
    });
  },
  handleDuplicateSelectedBookChange: function(groupKey, bookId) {
    var askDuplicatesDataTmp;
    askDuplicatesDataTmp = this.state.askDuplicatesData;
    askDuplicatesDataTmp['duplicated'][groupKey]['assignedBookId'] = bookId;
    return this.setState({
      askDuplicatesData: askDuplicatesDataTmp
    });
  },
  render: function() {
    return React.createElement("div", null, (this.state.showAddInventory ? React.createElement(ButtonGroup, {
      "justified": true
    }, React.createElement(ButtonGroup, null, React.createElement(Button, {
      "bsStyle": 'default',
      "onClick": this.handleCancelAddInventoryClicked
    }, React.createElement(Icon, {
      "name": 'trash-o'
    }), " Hinzuf\u00fcgen abbrechen")), (this.state.askDuplicates ? React.createElement(ButtonGroup, null, React.createElement(Button, {
      "bsStyle": 'primary',
      "disabled": !this.state.askDuplicatesData.duplicated.every(function(group) {
        return group.assignedBookId !== false;
      }),
      "onClick": this.handleSubmitAddDuplicatedInventoryClicked
    }, React.createElement(Icon, {
      "name": 'upload'
    }), " Hinzuf\u00fcgen")) : React.createElement(ButtonGroup, null, React.createElement(Button, {
      "bsStyle": 'primary',
      "disabled": this.state.newBarcodes.length === 0,
      "onClick": this.handleSubmitAddInventoryClicked
    }, React.createElement(Icon, {
      "name": 'upload'
    }), " Hinzuf\u00fcgen")))) : React.createElement(ButtonGroup, {
      "justified": true
    }, React.createElement(ButtonGroup, null, React.createElement(Button, {
      "bsStyle": 'default',
      "onClick": this.handleAddInventoryClicked
    }, "Exemplare hinzuf\u00fcgen")))), React.createElement("hr", null), (this.state.showAddInventory && this.state.askDuplicates ? React.createElement(SolveDuplicatesBox, {
      "uniqueBarcodes": this.state.askDuplicatesData.unique,
      "onSelectedBookChange": this.handleDuplicateSelectedBookChange,
      "barcodeGroups": this.state.askDuplicatesData.duplicated
    }) : this.state.showAddInventory ? React.createElement(AddInventoryBox, {
      "barcodes": this.state.newBarcodes,
      "onNewBarcode": this.handleNewBarcode,
      "onNewBarcodeRemove": this.handleNewBarcodeRemove
    }) : void 0));
  }
});
